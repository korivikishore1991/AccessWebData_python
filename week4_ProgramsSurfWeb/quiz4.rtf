{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Georgia;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red51\green51\blue51;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa500\partightenfactor0

\f0\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Reading Web Data From Python\
\pard\pardeftab720\sl420\sa80\partightenfactor0

\f1\fs28 \cf2 8\'a0questions\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 1.\'a0\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\fs28 \cf2 Which of the following Python data structures is most similar to the value returned in this line of Python:\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26 \cf3 \cb4 \strokec3 x = urllib.urlopen('http://www.py4inf.com/code/romeo.txt')\
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 regular expression\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 file handle
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 list\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 dictionary\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 socket\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 2.\'a0\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\fs28 \cf2 In this Python code, which line actually reads the data?\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26 \cf3 \cb4 \strokec3 import socket\
mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\
mysock.connect(('www.py4inf.com', 80))\
mysock.send('GET http://www.py4inf.com/code/romeo.txt HTTP/1.0\\n\\n')\
while True:\
    data = mysock.recv(512)\
    if ( len(data) < 1 ) :\
        break\
    print data\
mysock.close()\
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 mysock.recv()
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 socket.socket()\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 mysock.close()\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 mysock.connect()\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 mysock.send()\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 3.\'a0\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\fs28 \cf2 Which of the following regular expressions would extract the URL from this line of HTML:\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26 \cf3 \cb4 \strokec3 <p>Please click <a href="http://www.dr-chuck.com">here</a></p>\
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 href="(.+)"
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 href=".+"\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 http://.*\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 <.*>\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 4.\'a0\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\fs28 \cf2 In this Python code, which line is most like the open() call to read a file:\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26 \cf3 \cb4 \strokec3 import socket\
mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\
mysock.connect(('www.py4inf.com', 80))\
mysock.send('GET http://www.py4inf.com/code/romeo.txt HTTP/1.0\\n\\n')\
while True:\
    data = mysock.recv(512)\
    if ( len(data) < 1 ) :\
        break\
    print data\
mysock.close()\
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 mysock.connect()
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 import socket\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 mysock.recv()\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 mysock.send()\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 socket.socket()\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 5.\'a0\
\pard\pardeftab720\sl420\partightenfactor0

\fs28 \cf2 Which HTTP header tells the browser the kind of document that is being returned?\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 Metadata:\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 ETag:\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 Document-Type:\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 Content-Type:
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 HTML-Document:\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 6.\'a0\
\pard\pardeftab720\sl420\partightenfactor0

\fs28 \cf2 What should you check before scraping a web site?\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 That the web site only has links within the same site\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 That the web site returns HTML for all pages\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 That the web site allows scraping
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 That the web site supports the HTTP GET command\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 7.\'a0\
\pard\pardeftab720\sl420\partightenfactor0

\fs28 \cf2 What is the purpose of the BeautifulSoup Python library?\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 It optimizes files that are retrieved many times\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 It repairs and parses HTML to make it easier for a program to understand
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 It builds word clouds from web pages\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 It animates web operations to make them more attractive\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 It allows a web site to choose an attractive skin\
\pard\pardeftab720\sl420\partightenfactor0

\fs50 \cf2 8.\'a0\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\fs28 \cf2 What ends up in the "x" variable in the following code:\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs26 \cf3 \cb4 \strokec3 html = urllib.urlopen(url).read()\
soup = BeautifulSoup(html)\
x = soup('a')\
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs28 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl420\partightenfactor0

\b \cf2 A list of all the anchor tags (<a..) in the HTML from the URL
\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 True if there were any anchor tags in the HTML from the URL\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 All of the externally linked CSS files in the HTML from the URL\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \
\pard\pardeftab720\sl420\partightenfactor0
\cf2 All of the paragraphs of the HTML from the URL\
}